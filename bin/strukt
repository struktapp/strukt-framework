#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);

$autoloadFiles = array(__DIR__ . '/../vendor/autoload.php',
                       __DIR__ . '/../../../autoload.php');

foreach($autoloadFiles as $autoloadFile)
    if(file_exists($autoloadFile))
        require_once $autoloadFile;

echo "\n";

$match = [
	"tpl-auth",
	"tpl-middleware",
	"tpl-provider",
	"tpl-loader",
	"tpl-cfg",
	"tpl-pkg",
	"app",
	"ext",
	"all"
];

$optional = [
	"jwt"
];

$arg1 = $argv[1]??"all";

if(in_array($arg1, ["help","--help","-h"]))
	exit(" Strukt Boot
 ====================
 Generate configurations and templates.

 tpl-auth       - Templates for AuthModule
 tpl-middleware - Templates for Middleware
 tpl-provider   - Templates for Provider
 tpl-loader     - Templates for Loader
 tpl-cfg        - Templates for Configuration
 tpl-pkg        - Templates for Package
 ext            - Extender
 jwt            - JWT middleware\n\n");

$which = [];
if($arg1 == "all")
	$which = array_merge($which, $match);

if($arg1 == "jwt")
	$which[] = "jwt";

if(empty($which))
	if(in_array($arg1, $match))
		$which[] = $arg1;

if(empty($which) || !in_array($arg1, $which))
	new Exception("Invalid argument!");

$has = fn($needle, $message)=>print_r(in_array($needle, $which)?" - ".$message."\n":"")?in_array($needle, $which):false;

if($has("all", "remove directory .tpl"))Strukt\Fs::rmdir('.tpl');
if($has("app", "remove directory app"))Strukt\Fs::rmdir('app');
if($has("app", "remove directory lib/App"))Strukt\Fs::rmdir('lib/App');
if($has("app", "remove directory cfg"))Strukt\Fs::rmdir('cfg');
if($has("app", "remove .env"))Strukt\Fs::rm('.env');
if($has("app", "remove bootstrap.php"))Strukt\Fs::rm('bootstrap.php');
if($has("app", "remove index.php"))Strukt\Fs::rm('index.php');
if($has("app", "remove xcli"))Strukt\Fs::rm('xcli');

if($has("app", "make directory cfg"))Strukt\Fs::mkdir("cfg");
if($has("tpl-cfg", "make directory tpl"))Strukt\Fs::mkdir(".tpl/sgf/cfg");
if($has("tpl-auth", "make directory tpl|AuthModule/Controller"))Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Controller");
if($has("tpl-auth", "make directory tpl|AuthModule/Form"))Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Form");
if($has("tpl-auth", "make directory tpl|AuthModule/Router"))Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Router");
if($has("tpl-auth", "make directory tpl|AuthModule/Tests"))Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Tests");
if($has("tpl-middleware", "make directory tpl|App/Middleware"))Strukt\Fs::mkdir(".tpl/sgf/lib/App/Middleware");
if($has("tpl-provider", "make directory tpl|App/Provider"))Strukt\Fs::mkdir(".tpl/sgf/lib/App/Provider");
if($has("tpl-pkg", "make directory tpl|Strukt/Pakcage"))Strukt\Fs::mkdir(".tpl/sgf/src/Strukt/Package");
if($has("ext", "make directory lib/App"))Strukt\Fs::mkdir("lib/App");
if($has("app", "make directory lib/App/Contract"))Strukt\Fs::mkdir("lib/App/Contract");
if($has("app", "make directory lib/App/Middleware"))Strukt\Fs::mkdir("lib/App/Middleware");
if($has("jwt", "make directory lib/App/Middleware"))Strukt\Fs::mkdir("lib/App/Middleware");
if($has("app", "make directory lib/App/Provider"))Strukt\Fs::mkdir("lib/App/Provider");

if($has("tpl-auth", "create file tpl|AuthModule/Controller/User.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Controller/User.sgf", '<?php
namespace {{app}}\AuthModule\Controller;

use Strukt\Framework\Contract\Controller as AbstractController;

class User extends AbstractController{

	public function find($id){

		return "Couldn\'t find User:[id] - AuthModule\Controller\User::find Not Yet Implemented!";
	}

	public function getAll(){

		return "AuthModule\Controller\User::getAll Not Yet Implemented!";
	}

	public function doAuth($username, $password){

		$user = $this->get("User", array($username, $password));

		return $user->username == "admin" && $user->password == sha1("p@55w0rd");
	}
}
');

if($has("tpl-auth", "create file tpl|AuthModule/Form/User.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Form/User.sgf", '<?php
namespace {{app}}\AuthModule\Form;

use Strukt\Framework\Contract\Form as AbstractForm;

class User extends AbstractForm{
	
	/**
	* @IsNotEmpty()
	* @IsAlpha()
	*/
	public string $username;

	/**
	* @IsNotEmpty()
	*/
	public string $password;
}
');


if($has("tpl-auth", "create file tpl|model|App/User.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/User.sgf", '<?php
namespace {{app}};

class User extends \Strukt\Entity{

	/**
	* @Type(string)
	*/
	public $username;

	/**
	* @Type(string)
	*/
	public $password;
}
');

if($has("tpl-auth", "create file tpl|AuthModule/Router/Auth.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Router/Auth.sgf", '<?php

namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response\Plain as Response;
use Strukt\Framework\Contract\Router as AbstractRouter;

class Auth extends AbstractRouter{

	/**
	* @Route(/login)
	* @Method(POST)
	* @Form(User)
	*/
	public function login(Request $request){

		$username = $request->get("username");
		$password = $request->get("password");

		if($this->get("au.ctr.User")->doAuth($username, sha1($password))){

	    	new \Strukt\Auth($username);
	       	return response()->json(array(

	            "success"=>true, 
	            "message"=>"User successfully authenticated."
	        ));
	    }
	
        return response()->json(array(

            "success"=>false,
            "message"=>"Failed to authenticate user!"
        ));
	}

	/**
	* @Route(/current/user)
	* @Method(POST)
	*/
	public function currentUser(Request $request){

		$username = $request->getUser();

		return new Response($username);
		// return new Response(sprintf("%s %s", $user->getUsername(), $user->getToken());
	}

	/**
	* @Route(/logout)
	* @Method(POST)
	*/
	public function logout(Request $request){

		$request->getSession()->invalidate();

		return "Successfully logged out.";
	}
}
');

if($has("tpl-auth", "create file tpl|AuthModule/Router/Index.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Router/Index.sgf", '<?php
namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response\Plain as Response;
use Strukt\Framework\Contract\Router as AbstractRouter;

class Index extends AbstractRouter{

	/**
	* @Route(/)
	* @Method(GET)
	*/
	public function welcome(){
		
		return "</b>Strukt Works!<b>";
	}

	/**
	* @Route(/hello/world)
	* @Method(GET)
	*/
	public function helloWorld(){

		//return $this->core()->get("assets")->get("/index.html");
		return response()->body(fs("public/static")->cat("index.html"));
	}
	
	/**
	* @Route(/hello/{name:alpha})
	* @Method(GET)
	*/
	public function helloTo($name, Request $request){

		return sprintf("<b>Hello %s!</b>", $name);	
	}

	/**
	* @Route(/users/all)
	* @Permission(user_all)
	* @Method(GET)
	*/
	public function getAllUsers(){
		
		return $this->get("au.ctr.User")->getAll();
	}

	/**
	* @Route(/user)
	* @Method(GET)
	* @Auth()
	*/
	public function getUser(Request $request){

		$id = $request->query->get("id");

		return $this->get("au.ctr.User")->find($id);
	}

	/**
	* @Route(/test)
	* @Method(GET)
	*/
	public function testException(){

		throw new \RuntimeException("Whoops!");
	}	
}
');

if($has("tpl-auth", "create file tpl|AuthModule/_AuthModule.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/_AuthModule.sgf", '<?php
namespace {{app}}\AuthModule;

use Strukt\Framework\Contract\Module as AbstractModule;

class {{app}}AuthModule extends AbstractModule{

	protected $alias="Au";
}
');

if($has("tpl-auth", "create file tpl|AuthModule/Tests/UserTest.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Tests/UserTest.sgf", '<?php
namespace {{app}}\AuthModule\Tests;

// use Strukt\Core\Registry;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase{

	private $core;

	public function setUp():void{
	
		// $this->core = Registry::getInstance()->get("core");
	}

	public function testDoAuth(){

		$username = "admin";
		$password = "p@55w0rd";

		$isSuccess = true;
		// $isSuccess = $this->core->get("au.ctr.User")->doAuth($username, $password);

		$this->assertTrue($isSuccess);
	}
}
');

if($has("tpl-pkg", "create file tpl|Package/Pkg_.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/src/Strukt/Package/Pkg_.sgf", '<?php

namespace Strukt\Package;

use Strukt\Framework\Contract\Package as PackageInterface

/**
* @author Moderator <pitsolu@gmail.com>
*/
class Pkg{{name}} implements PackageInterface{

	private $manifest;

	public function __construct(){

		$this->manifest = array(
			"cmd_name"=>"{{name}}",
			"package"=>"pkg-{{lower_name}}",
			"files"=>array()
		);
	}

	/**
	* @param string $type
	*
	* @return array
	*/
	public function getSettings(string $type):array{

		$settings = array(
			"App:Cli"=>array(
				"providers"=>array(),
				"middlewares"=>array(),
				"commands"=>array()
			),
			"App:Idx"=>array(
				"providers"=>array(),
				"middlewares"=>array()
			)
		);

		return $settings[$type];
	}

	/**
	* @return string
	*/
	public function getName():string{

		return $this->manifest["package"];
	}

	/**
	* @return string
	*/ 
	public function getCmdName():string{

		return $this->manifest["cmd_name"];
	}

	/**
	* @return array
	*/
	public function getFiles():array{

		return $this->manifest["files"];
	}

	/**
	* @return array|null
	*/
	public function getModules():array|null{

		return null;
	}

	/**
	* Use php\'s class_exists function to identify a class that indicated your package is installed
	*
	* @return bool
	*/
	public function isPublished():bool{

		//This will return false because SomeClass::class shouldn\'t exists
		return class_exists(\SomeClass::class);
	}

	/**
	* @return array|null
	*/
	public function getRequirements():array|null{
		
		return null;
	}
}
');

if($has("tpl-provider", "create file tpl|Provider/Provider.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/lib/App/Provider/Provider.sgf", '<?php

namespace App\Provider;

use Strukt\Contract\ProviderInterface;

/**
* @Name({{name}})
*/
class {{class_name}} implements ProviderInterface{

	use \Strukt\Traits\FacetHelper;

	public function __construct(){

		//
	}

	/**
	* @return void
	*/
	public function register():void{

	}
}
');

if($has("tpl-middleware", "create file tpl|Middleware/Middleware.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/lib/App/Middleware/Middleware.sgf", '<?php

namespace App\Middleware;

use Strukt\Contract\MiddlewareInterface;
use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Http\Response\Plain as PlainResponse;

/**
* @Name({{name}})
*/
class {{class_name}} implements MiddlewareInterface{

	public function __construct(){

		//
	}

	/**
	* @param \Strukt\Contract\Http\ResponseInterface $request
	* @param \Strukt\Contract\Http\ResponseInterface $response
	* @param callable $next
	*
	* @return \Strukt\Http\Response\Plain
	*/
	public function __invoke(RequestInterface $request, 		
								ResponseInterface $response, 
								callable $next):PlainResponse{

		return $next($request, $response);
	}
}
');

if($has("tpl-loader", "create file tpl|App/Loader.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/lib/App/Loader.sgf", '<?php
namespace App;

use Strukt\Router\Kernel as Router;
use Strukt\Framework\Application;

/**
*	Application Loader Class
*
*	WARNING: THIS FILE IS AUTO-GENERATED. 
*			   DO NOT ADD ANYTHING BECAUSE 
*			   IT WILL BE OVERWRITTEN
*
*	@author Moderator <pitsolu@gmail.com>
*/
class Loader{

	private $app;

	/**
	* Constructor
	*	
	* Initialize Strukt Framework
	*
	* @param \Strukt\Router\Kernel $router
	*/
	public function __construct(?Router $router=null){

		$this->app = new Application($router);
		{{packages}}
	}

	/**
	* Getter for Strukt Application
	*
	* @return \Strukt\Framework\Application
	*/
	public function getApp():Application{

		return $this->app;
	}
}
');

if($has("app", "create file App/Contract/AbstractCommand.php"))
Strukt\Fs::touchWrite("lib/App/Contract/AbstractCommand.php", '<?php

namespace App\Contract;

use Strukt\Console\Command as ConsoleCommand;

/**
* @author Moderator <pitsolu@gmail.com>
*/
abstract class AbstractCommand extends ConsoleCommand{

	// use CoreTraits;
}
');

if($has("app", "create file App/Middleware/Cors.php"))
Strukt\Fs::touchWrite("lib/App/Middleware/Cors.php", '<?php

namespace App\Middleware;

use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Contract\MiddlewareInterface;
use Strukt\Http\Response\Plain as PlainResponse;

/**
* Name(cors)
*/
class Cors implements MiddlewareInterface{

	public function __construct(){

		//
	}

	/**
	* @param \Strukt\Contract\Http\ResponseInterface $request
	* @param \Strukt\Contract\Http\ResponseInterface $response
	* @param callable $next
	*
	* @return \Strukt\Http\Response\Plain
	*/
	public function __invoke(RequestInterface $request, 
								ResponseInterface $response, 
								callable $next):PlainResponse{

    	header("Access-Control-Allow-Origin: *");
		header("Access-Control-Allow-Headers: *");
		header("Access-Control-Allow-Methods: *");

    	return $next($request, $response);
	}
}
');

if($has("app", "create file App/Middleware/XSession.php"))
Strukt\Fs::touchWrite("lib/App/Middleware/XSession.php", '<?php

namespace App\Middleware;

use Strukt\Contract\MiddlewareInterface;
use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Http\Response\Plain as PlainResponse;

/**
* @Name(xsess)
* @Inject(session)
*/
class XSession implements MiddlewareInterface{

	private $session;
	private static $options = [];

	public function __construct(){

		$this->session = event("@inject.session")->exec();
	}

	/**
	* @param array $options
	*/
	public static function withOptions(array $options):void{

		self::$options = $options;
	}

	/**
	* @param \Strukt\Contract\Http\ResponseInterface $request
	* @param \Strukt\Contract\Http\ResponseInterface $response
	* @param callable $next
	*
	* @return \Strukt\Http\Response\Plain
	*/
	public function __invoke(RequestInterface $request, 
								ResponseInterface $response, 
								callable $next):PlainResponse{

		$this->session->start();
		foreach(self::$options as $key=>$val)
			$this->session->set($key, $val);

		if($this->session->has("username"));
			$request->setUser(new \Strukt\User(self::$options["username"]));

		$request->setSession($this->session);

		return $next($request, $response);
	}
}
');

if($has("jwt", "create file App/Middleware/Jwt.php"))
Strukt\Fs::touchWrite("lib/App/Middleware/Jwt.php", '<?php

namespace App\Middleware;

use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Contract\MiddlewareInterface;
use Strukt\Http\Error\Unauthorized;
use Strukt\Http\Session\Native as Session;

use App\Core;

/**
* @Name(jwt)
*/
class Jwt implements MiddlewareInterface{

	public function __construct(){

		if(negate(class_exists(\Strukt\Jwt::class)))
			raise("package strukt/key is required for jwt!");
	}

	public function __invoke(RequestInterface $request, ResponseInterface $response, callable $next){

		if($request->headers->has("Authorization")){
			
	  		$token = $request->headers->get("Authorization");
	  		$token = trim(str($token)->replace("Bearer", "")->yield());
	  		$jwt = jwt($token);

	  		if(!$jwt->valid()){

	  			return new Unauthorized([

	  				"success"=>false,
	  				"message"=>"Unauthorized: Token expired!",
	  				"jwt"=>"expired",
	  				"data"=>[]

	  			]);
	  		}

	  		$user = $jwt->yield()->data;
	  		$session = new Session;
	  		$session->set("username", $user->email);
	  		$session->set("role", $user->role);
	  		$session->set("contact_id", $user->contact_id);
	  	}

    	return $next($request, $response);
	}
}
');

if($has("app", "create file App/Provider/Facet.php"))
Strukt\Fs::touchWrite("lib/App/Provider/Facet.php",'<?php

namespace App\Provider;

use Strukt\Ref;
use Strukt\Contract\ProviderInterface;

/**
* @Name(facet)
*/
class Facet implements ProviderInterface{

	use \Strukt\Traits\FacetHelper;

	public function __construct(){

		//
	}

	/**
	* @return void
	*/
	public function register():void{

		$self = $this;
		event("provider.core", function(string $alias_ns, ?array $args = null) use($self){

			if(!reg()->exists("nr"))
				raise("[nr|Name Registry] does not exists!");

			if(!is_null($args))
				return Ref::create($self->getNamespace($alias_ns))
							->makeArgs($args)
							->getInstance();

			return Ref::create($self->getNamespace($alias_ns))
					->noMake()
					->getInstance();
		});
	}
}
');

if($has("app", "create file App/Provider/Logger.php"))
Strukt\Fs::touchWrite("lib/App/Provider/Logger.php", '<?php

namespace App\Provider;

use Monolog\Logger as Monolog;
use Monolog\Handler\StreamHandler;
use Strukt\Contract\ProviderInterface;
use Strukt\Env;

/**
* @Name(logger)
*/
class Logger implements ProviderInterface{ 

	public function __construct(){

		if(negate(class_exists(Monolog)))
			raise("Monolog\Logger is not installed!");
	}

	/**
	* @return void
	*/
	public function register():void{

		event("provider.logger", function(string $logger_name, string $log_file, $log_type = Monolog::INFO){

			$logger = new Monolog($logger_name);
			$logger->pushHandler(new StreamHandler($log_file, $log_type));

			return $logger;
		});

		event("service.logger", fn()=>new class(){

			public function info($message, array $context = []){

				$logger = event("provider.logger")->apply(env("logger_name"), env("logger_file"))->exec();
				$logger->info($message, $context);
			}

			public function error($message, array $context = []){

				$logger = event("provider.logger")
							->apply(env("logger_name"), env("logger_file"),Monolog::ERROR)
							->exec();

				$logger->error($message, $context);
			}

			public function alert($message, array $context = []){

				$logger = event("provider.logger")
							->apply(env("logger_name"), env("logger_file"),Monolog::ALERT)
							->exec();

				$logger->alert($message, $context);
			}
		});	
	}
}
');

if($has("app", "create file App/Validator.php"))
Strukt\Fs::touchWrite("lib/App/Validator.php", '<?php

namespace App;

use Strukt\Framework\Contract\Validator as AbstractValidator;
use Strukt\Traits\Validator as ValidatorTraits;

/**
* Validator Extra
* 
* This as class you can use to add your custom validators
*
* @author Moderator <pitsolu@gmail.com>
*/
class Validator extends AbstractValidator{

	use ValidatorTraits;

	/**
	* @param float|int $len
	*
	* return static
	*/
	public function isLenGt(float|int $len):static{

		$this->message["is_gt"] = false;
		if(strlen($this->getValue()) > $len)
			$this->message["is_gt"] = true;

		return $this;
	}
}
');

if($has("tpl-cfg", "create file tpl|cfg/app.sgf"))
Strukt\Fs::touchWrite(".tpl/sgf/cfg/app.sgf", 'app-name = {{app}}
middlewares[] = auth
middlewares[] = authz
middlewares[] = except
middlewares[] = xsess
middlewares[] = sess
middlewares[] = valid
; middlewares[] = asset
; middlewares[] = cors
providers[] = facet
providers[] = valid
; providers[] = logger
; providers[] = strukt.asset
');

if($has("app", "create file cfg/package.ini"))
Strukt\Fs::touchWrite("cfg/package.ini",'[auth]
default = pop-db
home[] = pop-db
home[] = red-db
');

if($has("app", "create file cfg/module.ini"))
Strukt\Fs::touchWrite("cfg/module.ini", '[folders]
ctr = Controller
rtr = Router
frm = Form
tes = Tests
; fix = Fixture
; rep = Repository
; sdr = Seeder
');

if($has("app", "create file cfg/repo.ini"))
Strukt\Fs::touchWrite("cfg/repo.ini", '; core = Extender
core = Core
pkg-auth = PkgAuth
pkg-db = PkgDb
pkg-book = PkgBook
pkg-tests = PkgTests
pkg-asset = PkgAsset
');

if($has("app", "create file cfg/cmd.ini"))
Strukt\Fs::touchWrite("cfg/cmd.ini", '[main]
cmd[] = app:make
cmd[] = app:reload
cmd[] = app:exec
cmd[] = middleware:make
cmd[] = provider:make
cmd[] = route:make
cmd[] = route:ls
cmd[] = module:make
cmd[] = shell:exec
cmd[] = sys:util
cmd[] = sys:ls
cmd[] = cache:clear
cmd[] = cache:make
[pub-pak]
title = Package Publisher
cmd[] = package:publish
cmd[] = package:ls
cmd[] = package:info
; [pub-mak]
; title = Package Maker
; cmd[] = package:make
; cmd[] = package:add
; cmd[] = package:copy
; cmd[] = package:export
; [pkg-tests]
; title = PhpUnit Testing
; cmd[] = test:run
; cmd[] = test:ls
; [pkg-roles]
; title = RBAC
; cmd[] = perm:add
; cmd[] = role:add
; cmd[] = role:add:perm
; cmd[] = user:add
; cmd[] = user:dumpcred
; cmd[] = user:reset
; [pkg-book]
; title = Ledger
; cmd[] = period:make   
; cmd[] = make:trx-alloc     
; [pkg-db]
; title = Database
; cmd[] = model:make   
; cmd[] = db:make-models       
; cmd[] = db:make
; cmd[] = db:seeds 
; cmd[] = db:wipe
; cmd[] = db:sql
; [pkg-asset]
; title = Asset
; pkg-asset.cmd[] = md:html
');

if($has("app", "create file cfg/cache.ini"))
Strukt\Fs::touchWrite("cfg/cache.ini", 'disable = false');

if($has("app", "create file App/XHttp.php"))
Strukt\Fs::touchWrite("lib/App/XHttp.php", '<?php

namespace App;

use Strukt\Framework\Configuration;
use Strukt\Contract\Http\RequestInterface;

/**
 * {color white:bold}xhttp{/color} - {color blue}XHTTP is a CLI utility that mimicks a HTTP client.{/color}
 * 
 * {color yellow}Usage{/color}: xhttp <method> <route> [params...]
 * 
 * {color yellow}Arguments{/color}:
 * 
 * 	{color cyan}Method{/color}:       GET, POST ...etc
 * 	{color cyan}Route{/color}:        Example: /login Default: / root
 * 	{color cyan}Patameters{/color}:   Example: username=pitsolu password=p@55w0rd
 * 
 * {color yellow}Example{/color}:  ./xhttp POST /login username=pitsolu password=p@55word
 */
final class XHttp{

	private $config;
	private $request;

	/**
	 * @param \Strukt\Framework\Configuration $config
	 * @param \Strukt\Contract\Http\RequestInterface $request
	 */
	public function __construct(Configuration $config, ?RequestInterface $request = null){

		$this->config = $config;
		$this->request = $request;
	}

	/**
	 * class docBlock to usage message
	 * 
	 * @return string
	 */
	private function getDoc():string{

		$message = ref(static::class)->getRef()->getDocComment();
		$message = str($message)->replace(["/**"," */"," *"],"");
		$message = str(arr($message->split("\n"))->each(fn($k, $ln)=>ltrim($ln, "\t"))->concat("\n"));

		return huecli($message->yield());
	}

	/**
	 * Is ready only if app is ready (app.ini)
	 * 
	 * @return void
	 */
	private function isReady():void{

		if(negate(fs(phar("cfg")->adapt())->isFile("app.ini"))){

			$message = "\n  {color red}Application is not ready!{/color}\n\n".
			"  Run:\n".
			"  {color yellow}./xcli app:make <app_name>{/color}\n".
			"  {color yellow}./xcli app:reload{/color}\n\n";

			exit(huecli($message));
		}
	}

	/**
	 * @param mixed $arg1
	 * @param array &argv
	 * 
	 * @return array
	 */
	private function getUriAndMethod(mixed $arg1, array &$argv):array{

		$method = strtoupper(trim($arg1));//method
		$methods = [
			"ANY",
			"PUT", 
			"GET", 
			"PATH", 
			"POST", 
			"DELETE",
			"PATCH",
			"OPTIONS"
		];

		if(negate(arr($methods)->has($method)))
			list($uri, $method) = [$method, "GET"];

		if(empty($uri))//uri
			$uri = array_shift($argv);

		return array($uri, $method);
	}

	/**
	 * Split CLI input params to array
	 * 
	 * @param array $argv
	 * 
	 * @return array
	 */
	private function splitInput(array $argv):array{

		$params = array_map(function($param){

			if(preg_match("/\w\=\w/", $param))
				return (fn($k,$v)=>[$k=>$v])(...explode("=", $param));

		}, $argv);

		return arr($params)->level();
	}

	/**
	 * @param array $argv
	 * 
	 * @return void
	 */
	private function setUp(array $argv):void{

		array_shift($argv);// xhttp
		$arg1 = array_shift($argv);// arg1
		if(empty($arg1) || in_array(strtolower(trim($arg1)), ["usage","help","--help","-h","?"]))
			exit(sprintf(" %s\n", $this->getDoc()));

		$this->isReady();
		list($uri, $method) = $this->getUriAndMethod($arg1, $argv);
		$params = $this->splitInput($argv);

		$this->request = $this->request->duplicate(query:$params, request:$params, server:[

			"REQUEST_URI" => $uri,
			"REQUEST_METHOD" => $method
		]);
	}

	/**
	 * @return string
	 */
	public function run(array $argv):string{

		$this->setUp($argv);

		$kernel = new \App\Kernel($this->config, $this->request);
		return $kernel->run();
	}
}');

if($has("app", "create file App/Kernel.php"))
Strukt\Fs::touchWrite("lib/App/Kernel.php", '<?php

namespace App;

use Strukt\Http\Request;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Framework\Application;
use Strukt\Framework\Configuration;
use Strukt\Router\Kernel as Router;
use App\Loader;

/**
* @author Moderator <pitsolu@gmail.com>
*/
class Kernel{

	private $kernel;
	private $config;
	private $loader;
	private $app;

	/**
	* @param \Strukt\Framework\Configuration $config
	* @param \Strukt\Contract\Http\RequestInterface $request
	*/
	public function __construct(Configuration $config, ?RequestInterface $request = null){

		$this->config = $config;

		if(is_null($request))
			$request = Request::createFromGlobals();

		$this->kernel = new Router($request);

		$kconfigs = $config->getInjectables()->getConfigs();
		if(!empty($kconfigs))
			foreach($kconfigs as $key=>$kconfig)
				$this->kernel->inject($key, $kconfig);
			
		$this->kernel->providers(config("facet.providers", $this->config->get("providers")));
		$this->kernel->middlewares(config("facet.middlewares", $this->config->get("middlewares")));

		if(class_exists(Loader::class)){

			$this->loader = new Loader($this->kernel);
			$this->app =  $this->loader->getApp();
		}
	}

	/**
	* @return \Strukt\Framework\Configuration
	*/
	public function getConfig():Configuration{

		return $this->config;
	}

	/**
	* @return \Strukt\Router\Kernel
	*/
	public function getRouter():Router{

		return $this->kernel;
	}

	/**
	* @return \App\Loader
	*/
	public function getLoader():?Loader{

		return $this->loader;
	}

	/**
	* @return \Strukt\Framework\Application
	*/
	public function getApp():?Application{

		return $this->app;
	}

	public function run(){
		
		return $this->app->run();
	}
}
');

if($has("ext", "create file lib/App/Extender.php"))
Strukt\Fs::touchWrite("lib/App/Extender.php", '<?php

namespace App;

use Strukt\Package\Core as CorePackage;

/**
* @author Moderator <pitsolu@gmail.com>
*/
class Extender extends CorePackage{

	/**
	* @param string $type
	*
	* @return array
	*/
	public function getSettings(string $type):array{

		$configCli = parent::getSettings("App:Cli");
		$configIdx = parent::getSettings("App:Idx");

		// $configIdx["providers"] = [

		// 	\Strukt\Framework\Provider\Validator::class,
		// 	\App\Provider\Logger::class,
		// 	\App\Provider\Facet::class
		// ];

		// $configIdx["middlewares"] = [

		// 	\App\Middleware\Cors::class,
		// 	\Strukt\Router\Middleware\Session::class,
		// 	\Strukt\Router\Middleware\Authorization::class,
		// 	\Strukt\Router\Middleware\Authentication::class,
		// 	\Strukt\Framework\Middleware\Validator::class,
		// ];

		// $configCli["providers"] = [

		// 	\Strukt\Framework\Provider\Validator::class,
		// 	\App\Provider\Logger::class,
		// 	\App\Provider\Facet::class
		// ];

		// $configCli["middlewares"] = [

		// 	\App\Middleware\XSession::class,
		// 	\Strukt\Router\Middleware\Authentication::class,
		// 	\Strukt\Framework\Middleware\Validator::class,
		// ];

		// $configCli["commands"] = [

		// 	\Strukt\Framework\Console\Command\PackagePublisher::class,
		// 	\Strukt\Framework\Console\Command\PackageList::class,
		// 	\Strukt\Framework\Console\Command\PackageInfo::class,
		// 	\Strukt\Framework\Console\Command\PackageMake::class,
		// 	\Strukt\Framework\Console\Command\PackageAdd::class,
		// 	\Strukt\Framework\Console\Command\PackageCopy::class,
		// 	\Strukt\Framework\Console\Command\PackageExport::class
		// ];

		return [

			"App:Idx"=>$configIdx, 
			"App:Cli"=>$configCli

		][$type];
	}
}
');

if($has("app", "create file App/Injectable.php"))
Strukt\Fs::touchWrite("lib/App/Injectable.php", '<?php

namespace App;

use Strukt\User;
use Strukt\Http\Session\Native as Session;
use Strukt\Http\Session\ArrayCache as XSession;
use Strukt\Contract\Http\SessionInterface;
use Strukt\Contract\UserInterface;
use Strukt\Traits\ClassHelper;

/**
* @author Moderator <pitsolu@gmail.com>
*/
class Injectable{

	// use ClassHelper;

	/**
	 * @Package(core)
	 * @Inject(permissions)
	 */
	public function getPermissions(SessionInterface $session){

		// $permissions["permissions"] = [];
		$permissions = [];

		/**
		 * This permission enables Strukt\'s Auth Annotation
		 */
		if($session->has("username"))
			$permissions[] = "strukt:auth"; 
			// $permissions["permissions"][] = "strukt:auth"; 

		return $permissions;
	}

	/**
	 * @Package(core)
	 * @Inject(verify)
	 */
	public function toVerify(SessionInterface $session):UserInterface{

		$user = new \Strukt\User();
		$user->setUsername($session->get("username"));

		return $user;
	}

	/**
	 * @Package(core)
	 * @Inject(session)
	 */
	public function getSession():SessionInterface{

		if(config("app.type") == "App:Cli")
			return new XSession;

		return new Session;
	}
}
');

if($has("app", "create file xcli"))
Strukt\Fs::touchWrite("xcli", '#!/usr/bin/php
<?php

use Strukt\Framework\Shell;
use Strukt\Env;
use Strukt\Framework\Configuration;

$loader = require "bootstrap.php";

env("json_validation_err", true);
env("res_send_headers", false);
config("app.type","App:Cli");

$kernel = new App\Kernel(new Configuration());
$app = $kernel->getApp();
if(!is_null($app)){

	$app->init();
	$kernel->getRouter()->init();
}

$sh = new Shell();
exit($sh->run($_SERVER["argv"]));
');

if($has("app", "create file index.php"))
Strukt\Fs::touchWrite("index.php", '<?php

use Strukt\Env;
use Strukt\Framework\Configuration;

require "bootstrap.php";

env("json_validation_err", true);
env("res_send_headers", true);
config("app.type","App:Idx");

$kernel = new App\Kernel(new Configuration());
exit($kernel->run());
');

if($has("app", "create file bootstrap.php"))
Strukt\Fs::touchWrite("bootstrap.php", '<?php

use Strukt\Env;

define("DS", DIRECTORY_SEPARATOR);

error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING);

$loader = require "vendor/autoload.php";

$collision = new \NunoMaduro\Collision\Provider();
$collision->register();

if(php_sapi_name() != "cli"){

	$whoops = new \Whoops\Run;
	$whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler);
	$whoops->register();
}

Env::withFile(".env");
Env::set("root_dir", getcwd());

$loader->add(sprintf("%s\\\", config("app.name")), __DIR__."/app/src/");			

return $loader;
');

if($has("app", "create file .env"))
Strukt\Fs::touchWrite(".env", 'authmod_name = AuthModule
rel_appsrc = app'.DS.'src
rel_tplsgf_dir = .tpl'.DS.'sgf
rel_tplapp_dir = .tpl'.DS.'sgf'.DS.'app
rel_tplappsrc_dir = .tpl'.DS.'sgf'.DS.'app'.DS.'src
rel_tplapproot_dir = .tpl'.DS.'sgf'.DS.'app'.DS.'src'.DS.'App
rel_apptpl_ini = .tpl'.DS.'sgf'.DS.'cfg'.DS.'app.sgf
tpt_appcfg = app.sgf

rel_loader_sgf = .tpl'.DS.'sgf'.DS.'lib'.DS.'App'.DS.'Loader.sgf
rel_mdl_sgf = .tpl'.DS.'sgf'.DS.'lib'.DS.'App'.DS.'Middleware'.DS.'Middleware.sgf
rel_prv_sgf = .tpl'.DS.'sgf'.DS.'lib'.DS.'App'.DS.'Provider'.DS.'Provider.sgf
rel_app_lib = lib'.DS.'App
rel_static_dir = public'.DS.'static

rel_app_ini = cfg'.DS.'app.ini
rel_mod_ini = cfg'.DS.'module.ini
rel_db_ini = cfg'.DS.'db.ini
rel_repo_ini = cfg'.DS.'repo.ini
rel_cmd_ini = cfg'.DS.'cmd.ini

logger_name = Strukt Logger
logger_file = logs'.DS.'app.log

cli_app_name = Strukt Console
cli_label = Strukt
cli_app_dir = app
cli_file_name = xcli

is_dev = true
vendor_fw = '.DS.'vendor'.DS.'strukt'.DS.'

serve_host = 127.0.0.1
serve_port = 8080
serve_ctx = .
serve_file = index.php

phar = false
');

chmod('./xcli', 0755);

printf("\nStrukt Booted.\n");